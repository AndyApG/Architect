// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<TypeEditor /> can render for edge 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <TypeEditor
    category="edge"
    colorOptions={
      Object {
        "edge": Array [],
        "node": Array [],
      }
    }
    dirty={false}
    displayVariables={Array []}
    form="TYPE_EDITOR"
    handleSubmit={[Function]}
    iconOptions={Array []}
    showCodeView={true}
    toggleCodeView={[Function]}
    type={null}
    valid={true}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        null,
        <h1>
          Create 
          edge
        </h1>,
        <small>
          (
          <a
            onClick={[Function]}
          >
            Show Code View
          </a>
          )
        </small>,
        <Connect(Guided)
          contentId="guidance.registry.type.label"
        >
          <div
            className="editor__section"
          >
            <h2
              id="field_label"
            >
              Label
            </h2>
            <Validated
              component={[Function]}
              name="label"
              validation={
                Object {
                  "required": true,
                }
              }
            />
          </div>
        </Connect(Guided)>,
        <Connect(Guided)
          contentId="guidance.registry.type.color"
        >
          <div
            className="editor__section"
          >
            <h2
              id="field_color"
            >
              Color
            </h2>
            <Validated
              colors={Array []}
              component={[Function]}
              name="color"
              validation={
                Object {
                  "required": true,
                }
              }
            />
          </div>
        </Connect(Guided)>,
        false,
        <Connect(Guided)
          contentId="guidance.registry.type.variables"
        >
          <div
            className="editor__section"
          >
            <h2>
              Variables
            </h2>
            <Connect(Variables)
              form="TYPE_EDITOR"
              name="variables"
            />
          </div>
        </Connect(Guided)>,
      ],
      "className": "type-editor editor__sections",
    },
    "ref": null,
    "rendered": Array [
      null,
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            "Create ",
            "edge",
          ],
        },
        "ref": null,
        "rendered": Array [
          "Create ",
          "edge",
        ],
        "type": "h1",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            "(",
            <a
              onClick={[Function]}
            >
              Show Code View
            </a>,
            ")",
          ],
        },
        "ref": null,
        "rendered": Array [
          "(",
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Show Code View",
              "onClick": [Function],
            },
            "ref": null,
            "rendered": "Show Code View",
            "type": "a",
          },
          ")",
        ],
        "type": "small",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <div
            className="editor__section"
          >
            <h2
              id="field_label"
            >
              Label
            </h2>
            <Validated
              component={[Function]}
              name="label"
              validation={
                Object {
                  "required": true,
                }
              }
            />
          </div>,
          "contentId": "guidance.registry.type.label",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <h2
                id="field_label"
              >
                Label
              </h2>,
              <Validated
                component={[Function]}
                name="label"
                validation={
                  Object {
                    "required": true,
                  }
                }
              />,
            ],
            "className": "editor__section",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Label",
                "id": "field_label",
              },
              "ref": null,
              "rendered": "Label",
              "type": "h2",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "component": [Function],
                "name": "label",
                "validation": Object {
                  "required": true,
                },
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "div",
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <div
            className="editor__section"
          >
            <h2
              id="field_color"
            >
              Color
            </h2>
            <Validated
              colors={Array []}
              component={[Function]}
              name="color"
              validation={
                Object {
                  "required": true,
                }
              }
            />
          </div>,
          "contentId": "guidance.registry.type.color",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <h2
                id="field_color"
              >
                Color
              </h2>,
              <Validated
                colors={Array []}
                component={[Function]}
                name="color"
                validation={
                  Object {
                    "required": true,
                  }
                }
              />,
            ],
            "className": "editor__section",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Color",
                "id": "field_color",
              },
              "ref": null,
              "rendered": "Color",
              "type": "h2",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "colors": Array [],
                "component": [Function],
                "name": "color",
                "validation": Object {
                  "required": true,
                },
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "div",
        },
        "type": [Function],
      },
      false,
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <div
            className="editor__section"
          >
            <h2>
              Variables
            </h2>
            <Connect(Variables)
              form="TYPE_EDITOR"
              name="variables"
            />
          </div>,
          "contentId": "guidance.registry.type.variables",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <h2>
                Variables
              </h2>,
              <Connect(Variables)
                form="TYPE_EDITOR"
                name="variables"
              />,
            ],
            "className": "editor__section",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Variables",
              },
              "ref": null,
              "rendered": "Variables",
              "type": "h2",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "form": "TYPE_EDITOR",
                "name": "variables",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "div",
        },
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          null,
          <h1>
            Create 
            edge
          </h1>,
          <small>
            (
            <a
              onClick={[Function]}
            >
              Show Code View
            </a>
            )
          </small>,
          <Connect(Guided)
            contentId="guidance.registry.type.label"
          >
            <div
              className="editor__section"
            >
              <h2
                id="field_label"
              >
                Label
              </h2>
              <Validated
                component={[Function]}
                name="label"
                validation={
                  Object {
                    "required": true,
                  }
                }
              />
            </div>
          </Connect(Guided)>,
          <Connect(Guided)
            contentId="guidance.registry.type.color"
          >
            <div
              className="editor__section"
            >
              <h2
                id="field_color"
              >
                Color
              </h2>
              <Validated
                colors={Array []}
                component={[Function]}
                name="color"
                validation={
                  Object {
                    "required": true,
                  }
                }
              />
            </div>
          </Connect(Guided)>,
          false,
          <Connect(Guided)
            contentId="guidance.registry.type.variables"
          >
            <div
              className="editor__section"
            >
              <h2>
                Variables
              </h2>
              <Connect(Variables)
                form="TYPE_EDITOR"
                name="variables"
              />
            </div>
          </Connect(Guided)>,
        ],
        "className": "type-editor editor__sections",
      },
      "ref": null,
      "rendered": Array [
        null,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              "Create ",
              "edge",
            ],
          },
          "ref": null,
          "rendered": Array [
            "Create ",
            "edge",
          ],
          "type": "h1",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              "(",
              <a
                onClick={[Function]}
              >
                Show Code View
              </a>,
              ")",
            ],
          },
          "ref": null,
          "rendered": Array [
            "(",
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Show Code View",
                "onClick": [Function],
              },
              "ref": null,
              "rendered": "Show Code View",
              "type": "a",
            },
            ")",
          ],
          "type": "small",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <div
              className="editor__section"
            >
              <h2
                id="field_label"
              >
                Label
              </h2>
              <Validated
                component={[Function]}
                name="label"
                validation={
                  Object {
                    "required": true,
                  }
                }
              />
            </div>,
            "contentId": "guidance.registry.type.label",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <h2
                  id="field_label"
                >
                  Label
                </h2>,
                <Validated
                  component={[Function]}
                  name="label"
                  validation={
                    Object {
                      "required": true,
                    }
                  }
                />,
              ],
              "className": "editor__section",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Label",
                  "id": "field_label",
                },
                "ref": null,
                "rendered": "Label",
                "type": "h2",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "component": [Function],
                  "name": "label",
                  "validation": Object {
                    "required": true,
                  },
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": "div",
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <div
              className="editor__section"
            >
              <h2
                id="field_color"
              >
                Color
              </h2>
              <Validated
                colors={Array []}
                component={[Function]}
                name="color"
                validation={
                  Object {
                    "required": true,
                  }
                }
              />
            </div>,
            "contentId": "guidance.registry.type.color",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <h2
                  id="field_color"
                >
                  Color
                </h2>,
                <Validated
                  colors={Array []}
                  component={[Function]}
                  name="color"
                  validation={
                    Object {
                      "required": true,
                    }
                  }
                />,
              ],
              "className": "editor__section",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Color",
                  "id": "field_color",
                },
                "ref": null,
                "rendered": "Color",
                "type": "h2",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "colors": Array [],
                  "component": [Function],
                  "name": "color",
                  "validation": Object {
                    "required": true,
                  },
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": "div",
          },
          "type": [Function],
        },
        false,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <div
              className="editor__section"
            >
              <h2>
                Variables
              </h2>
              <Connect(Variables)
                form="TYPE_EDITOR"
                name="variables"
              />
            </div>,
            "contentId": "guidance.registry.type.variables",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <h2>
                  Variables
                </h2>,
                <Connect(Variables)
                  form="TYPE_EDITOR"
                  name="variables"
                />,
              ],
              "className": "editor__section",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Variables",
                },
                "ref": null,
                "rendered": "Variables",
                "type": "h2",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "form": "TYPE_EDITOR",
                  "name": "variables",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": "div",
          },
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`<TypeEditor /> can render for node 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <TypeEditor
    category="node"
    colorOptions={
      Object {
        "edge": Array [],
        "node": Array [],
      }
    }
    dirty={false}
    displayVariables={Array []}
    form="TYPE_EDITOR"
    handleSubmit={[Function]}
    iconOptions={Array []}
    showCodeView={true}
    toggleCodeView={[Function]}
    type={null}
    valid={true}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        null,
        <h1>
          Create 
          node
        </h1>,
        <small>
          (
          <a
            onClick={[Function]}
          >
            Show Code View
          </a>
          )
        </small>,
        <Connect(Guided)
          contentId="guidance.registry.type.label"
        >
          <div
            className="editor__section"
          >
            <h2
              id="field_label"
            >
              Label
            </h2>
            <Validated
              component={[Function]}
              name="label"
              validation={
                Object {
                  "required": true,
                }
              }
            />
          </div>
        </Connect(Guided)>,
        <Connect(Guided)
          contentId="guidance.registry.type.color"
        >
          <div
            className="editor__section"
          >
            <h2
              id="field_color"
            >
              Color
            </h2>
            <Validated
              colors={Array []}
              component={[Function]}
              name="color"
              validation={
                Object {
                  "required": true,
                }
              }
            />
          </div>
        </Connect(Guided)>,
        <React.Fragment>
          <Connect(Guided)
            contentId="guidance.registry.type.icon"
          >
            <div
              className="editor__section"
            >
              <h2
                id="field_iconVariant"
              >
                Icon
              </h2>
              <Validated
                component={[Function]}
                name="iconVariant"
                optionComponent={[Function]}
                options={Array []}
                validation={
                  Object {
                    "required": true,
                  }
                }
              />
            </div>
          </Connect(Guided)>
          <Connect(Guided)
            contentId="guidance.registry.type.displayVariable"
          >
            <div
              className="editor__section"
            >
              <h2>
                Display Variable
              </h2>
              <Field
                component={[Function]}
                name="displayVariable"
                options={Array []}
              >
                <option
                  value=""
                >
                  — Select display variable —
                </option>
              </Field>
            </div>
          </Connect(Guided)>
        </React.Fragment>,
        <Connect(Guided)
          contentId="guidance.registry.type.variables"
        >
          <div
            className="editor__section"
          >
            <h2>
              Variables
            </h2>
            <Connect(Variables)
              form="TYPE_EDITOR"
              name="variables"
            />
          </div>
        </Connect(Guided)>,
      ],
      "className": "type-editor editor__sections",
    },
    "ref": null,
    "rendered": Array [
      null,
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            "Create ",
            "node",
          ],
        },
        "ref": null,
        "rendered": Array [
          "Create ",
          "node",
        ],
        "type": "h1",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            "(",
            <a
              onClick={[Function]}
            >
              Show Code View
            </a>,
            ")",
          ],
        },
        "ref": null,
        "rendered": Array [
          "(",
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Show Code View",
              "onClick": [Function],
            },
            "ref": null,
            "rendered": "Show Code View",
            "type": "a",
          },
          ")",
        ],
        "type": "small",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <div
            className="editor__section"
          >
            <h2
              id="field_label"
            >
              Label
            </h2>
            <Validated
              component={[Function]}
              name="label"
              validation={
                Object {
                  "required": true,
                }
              }
            />
          </div>,
          "contentId": "guidance.registry.type.label",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <h2
                id="field_label"
              >
                Label
              </h2>,
              <Validated
                component={[Function]}
                name="label"
                validation={
                  Object {
                    "required": true,
                  }
                }
              />,
            ],
            "className": "editor__section",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Label",
                "id": "field_label",
              },
              "ref": null,
              "rendered": "Label",
              "type": "h2",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "component": [Function],
                "name": "label",
                "validation": Object {
                  "required": true,
                },
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "div",
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <div
            className="editor__section"
          >
            <h2
              id="field_color"
            >
              Color
            </h2>
            <Validated
              colors={Array []}
              component={[Function]}
              name="color"
              validation={
                Object {
                  "required": true,
                }
              }
            />
          </div>,
          "contentId": "guidance.registry.type.color",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <h2
                id="field_color"
              >
                Color
              </h2>,
              <Validated
                colors={Array []}
                component={[Function]}
                name="color"
                validation={
                  Object {
                    "required": true,
                  }
                }
              />,
            ],
            "className": "editor__section",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Color",
                "id": "field_color",
              },
              "ref": null,
              "rendered": "Color",
              "type": "h2",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "colors": Array [],
                "component": [Function],
                "name": "color",
                "validation": Object {
                  "required": true,
                },
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "div",
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <Connect(Guided)
              contentId="guidance.registry.type.icon"
            >
              <div
                className="editor__section"
              >
                <h2
                  id="field_iconVariant"
                >
                  Icon
                </h2>
                <Validated
                  component={[Function]}
                  name="iconVariant"
                  optionComponent={[Function]}
                  options={Array []}
                  validation={
                    Object {
                      "required": true,
                    }
                  }
                />
              </div>
            </Connect(Guided)>,
            <Connect(Guided)
              contentId="guidance.registry.type.displayVariable"
            >
              <div
                className="editor__section"
              >
                <h2>
                  Display Variable
                </h2>
                <Field
                  component={[Function]}
                  name="displayVariable"
                  options={Array []}
                >
                  <option
                    value=""
                  >
                    — Select display variable —
                  </option>
                </Field>
              </div>
            </Connect(Guided)>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <div
                className="editor__section"
              >
                <h2
                  id="field_iconVariant"
                >
                  Icon
                </h2>
                <Validated
                  component={[Function]}
                  name="iconVariant"
                  optionComponent={[Function]}
                  options={Array []}
                  validation={
                    Object {
                      "required": true,
                    }
                  }
                />
              </div>,
              "contentId": "guidance.registry.type.icon",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <h2
                    id="field_iconVariant"
                  >
                    Icon
                  </h2>,
                  <Validated
                    component={[Function]}
                    name="iconVariant"
                    optionComponent={[Function]}
                    options={Array []}
                    validation={
                      Object {
                        "required": true,
                      }
                    }
                  />,
                ],
                "className": "editor__section",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Icon",
                    "id": "field_iconVariant",
                  },
                  "ref": null,
                  "rendered": "Icon",
                  "type": "h2",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "component": [Function],
                    "name": "iconVariant",
                    "optionComponent": [Function],
                    "options": Array [],
                    "validation": Object {
                      "required": true,
                    },
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": "div",
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <div
                className="editor__section"
              >
                <h2>
                  Display Variable
                </h2>
                <Field
                  component={[Function]}
                  name="displayVariable"
                  options={Array []}
                >
                  <option
                    value=""
                  >
                    — Select display variable —
                  </option>
                </Field>
              </div>,
              "contentId": "guidance.registry.type.displayVariable",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <h2>
                    Display Variable
                  </h2>,
                  <Field
                    component={[Function]}
                    name="displayVariable"
                    options={Array []}
                  >
                    <option
                      value=""
                    >
                      — Select display variable —
                    </option>
                  </Field>,
                ],
                "className": "editor__section",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Display Variable",
                  },
                  "ref": null,
                  "rendered": "Display Variable",
                  "type": "h2",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": <option
                      value=""
                    >
                      — Select display variable —
                    </option>,
                    "component": [Function],
                    "name": "displayVariable",
                    "options": Array [],
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "— Select display variable —",
                      "value": "",
                    },
                    "ref": null,
                    "rendered": "— Select display variable —",
                    "type": "option",
                  },
                  "type": [Function],
                },
              ],
              "type": "div",
            },
            "type": [Function],
          },
        ],
        "type": Symbol(react.fragment),
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <div
            className="editor__section"
          >
            <h2>
              Variables
            </h2>
            <Connect(Variables)
              form="TYPE_EDITOR"
              name="variables"
            />
          </div>,
          "contentId": "guidance.registry.type.variables",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <h2>
                Variables
              </h2>,
              <Connect(Variables)
                form="TYPE_EDITOR"
                name="variables"
              />,
            ],
            "className": "editor__section",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Variables",
              },
              "ref": null,
              "rendered": "Variables",
              "type": "h2",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "form": "TYPE_EDITOR",
                "name": "variables",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "div",
        },
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          null,
          <h1>
            Create 
            node
          </h1>,
          <small>
            (
            <a
              onClick={[Function]}
            >
              Show Code View
            </a>
            )
          </small>,
          <Connect(Guided)
            contentId="guidance.registry.type.label"
          >
            <div
              className="editor__section"
            >
              <h2
                id="field_label"
              >
                Label
              </h2>
              <Validated
                component={[Function]}
                name="label"
                validation={
                  Object {
                    "required": true,
                  }
                }
              />
            </div>
          </Connect(Guided)>,
          <Connect(Guided)
            contentId="guidance.registry.type.color"
          >
            <div
              className="editor__section"
            >
              <h2
                id="field_color"
              >
                Color
              </h2>
              <Validated
                colors={Array []}
                component={[Function]}
                name="color"
                validation={
                  Object {
                    "required": true,
                  }
                }
              />
            </div>
          </Connect(Guided)>,
          <React.Fragment>
            <Connect(Guided)
              contentId="guidance.registry.type.icon"
            >
              <div
                className="editor__section"
              >
                <h2
                  id="field_iconVariant"
                >
                  Icon
                </h2>
                <Validated
                  component={[Function]}
                  name="iconVariant"
                  optionComponent={[Function]}
                  options={Array []}
                  validation={
                    Object {
                      "required": true,
                    }
                  }
                />
              </div>
            </Connect(Guided)>
            <Connect(Guided)
              contentId="guidance.registry.type.displayVariable"
            >
              <div
                className="editor__section"
              >
                <h2>
                  Display Variable
                </h2>
                <Field
                  component={[Function]}
                  name="displayVariable"
                  options={Array []}
                >
                  <option
                    value=""
                  >
                    — Select display variable —
                  </option>
                </Field>
              </div>
            </Connect(Guided)>
          </React.Fragment>,
          <Connect(Guided)
            contentId="guidance.registry.type.variables"
          >
            <div
              className="editor__section"
            >
              <h2>
                Variables
              </h2>
              <Connect(Variables)
                form="TYPE_EDITOR"
                name="variables"
              />
            </div>
          </Connect(Guided)>,
        ],
        "className": "type-editor editor__sections",
      },
      "ref": null,
      "rendered": Array [
        null,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              "Create ",
              "node",
            ],
          },
          "ref": null,
          "rendered": Array [
            "Create ",
            "node",
          ],
          "type": "h1",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              "(",
              <a
                onClick={[Function]}
              >
                Show Code View
              </a>,
              ")",
            ],
          },
          "ref": null,
          "rendered": Array [
            "(",
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Show Code View",
                "onClick": [Function],
              },
              "ref": null,
              "rendered": "Show Code View",
              "type": "a",
            },
            ")",
          ],
          "type": "small",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <div
              className="editor__section"
            >
              <h2
                id="field_label"
              >
                Label
              </h2>
              <Validated
                component={[Function]}
                name="label"
                validation={
                  Object {
                    "required": true,
                  }
                }
              />
            </div>,
            "contentId": "guidance.registry.type.label",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <h2
                  id="field_label"
                >
                  Label
                </h2>,
                <Validated
                  component={[Function]}
                  name="label"
                  validation={
                    Object {
                      "required": true,
                    }
                  }
                />,
              ],
              "className": "editor__section",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Label",
                  "id": "field_label",
                },
                "ref": null,
                "rendered": "Label",
                "type": "h2",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "component": [Function],
                  "name": "label",
                  "validation": Object {
                    "required": true,
                  },
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": "div",
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <div
              className="editor__section"
            >
              <h2
                id="field_color"
              >
                Color
              </h2>
              <Validated
                colors={Array []}
                component={[Function]}
                name="color"
                validation={
                  Object {
                    "required": true,
                  }
                }
              />
            </div>,
            "contentId": "guidance.registry.type.color",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <h2
                  id="field_color"
                >
                  Color
                </h2>,
                <Validated
                  colors={Array []}
                  component={[Function]}
                  name="color"
                  validation={
                    Object {
                      "required": true,
                    }
                  }
                />,
              ],
              "className": "editor__section",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Color",
                  "id": "field_color",
                },
                "ref": null,
                "rendered": "Color",
                "type": "h2",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "colors": Array [],
                  "component": [Function],
                  "name": "color",
                  "validation": Object {
                    "required": true,
                  },
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": "div",
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <Connect(Guided)
                contentId="guidance.registry.type.icon"
              >
                <div
                  className="editor__section"
                >
                  <h2
                    id="field_iconVariant"
                  >
                    Icon
                  </h2>
                  <Validated
                    component={[Function]}
                    name="iconVariant"
                    optionComponent={[Function]}
                    options={Array []}
                    validation={
                      Object {
                        "required": true,
                      }
                    }
                  />
                </div>
              </Connect(Guided)>,
              <Connect(Guided)
                contentId="guidance.registry.type.displayVariable"
              >
                <div
                  className="editor__section"
                >
                  <h2>
                    Display Variable
                  </h2>
                  <Field
                    component={[Function]}
                    name="displayVariable"
                    options={Array []}
                  >
                    <option
                      value=""
                    >
                      — Select display variable —
                    </option>
                  </Field>
                </div>
              </Connect(Guided)>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <div
                  className="editor__section"
                >
                  <h2
                    id="field_iconVariant"
                  >
                    Icon
                  </h2>
                  <Validated
                    component={[Function]}
                    name="iconVariant"
                    optionComponent={[Function]}
                    options={Array []}
                    validation={
                      Object {
                        "required": true,
                      }
                    }
                  />
                </div>,
                "contentId": "guidance.registry.type.icon",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <h2
                      id="field_iconVariant"
                    >
                      Icon
                    </h2>,
                    <Validated
                      component={[Function]}
                      name="iconVariant"
                      optionComponent={[Function]}
                      options={Array []}
                      validation={
                        Object {
                          "required": true,
                        }
                      }
                    />,
                  ],
                  "className": "editor__section",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "Icon",
                      "id": "field_iconVariant",
                    },
                    "ref": null,
                    "rendered": "Icon",
                    "type": "h2",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "component": [Function],
                      "name": "iconVariant",
                      "optionComponent": [Function],
                      "options": Array [],
                      "validation": Object {
                        "required": true,
                      },
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                ],
                "type": "div",
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <div
                  className="editor__section"
                >
                  <h2>
                    Display Variable
                  </h2>
                  <Field
                    component={[Function]}
                    name="displayVariable"
                    options={Array []}
                  >
                    <option
                      value=""
                    >
                      — Select display variable —
                    </option>
                  </Field>
                </div>,
                "contentId": "guidance.registry.type.displayVariable",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <h2>
                      Display Variable
                    </h2>,
                    <Field
                      component={[Function]}
                      name="displayVariable"
                      options={Array []}
                    >
                      <option
                        value=""
                      >
                        — Select display variable —
                      </option>
                    </Field>,
                  ],
                  "className": "editor__section",
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "Display Variable",
                    },
                    "ref": null,
                    "rendered": "Display Variable",
                    "type": "h2",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": <option
                        value=""
                      >
                        — Select display variable —
                      </option>,
                      "component": [Function],
                      "name": "displayVariable",
                      "options": Array [],
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "— Select display variable —",
                        "value": "",
                      },
                      "ref": null,
                      "rendered": "— Select display variable —",
                      "type": "option",
                    },
                    "type": [Function],
                  },
                ],
                "type": "div",
              },
              "type": [Function],
            },
          ],
          "type": Symbol(react.fragment),
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <div
              className="editor__section"
            >
              <h2>
                Variables
              </h2>
              <Connect(Variables)
                form="TYPE_EDITOR"
                name="variables"
              />
            </div>,
            "contentId": "guidance.registry.type.variables",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <h2>
                  Variables
                </h2>,
                <Connect(Variables)
                  form="TYPE_EDITOR"
                  name="variables"
                />,
              ],
              "className": "editor__section",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Variables",
                },
                "ref": null,
                "rendered": "Variables",
                "type": "h2",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "form": "TYPE_EDITOR",
                  "name": "variables",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": "div",
          },
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
